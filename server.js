// Generated by CoffeeScript 1.10.0
(function() {
  var path;
  'use strict';
  var api_key, app, async, cartodb, express, http, labels_sql, lookup_sql, path, request, serveStatic, server, sql, user;

  express = require('express');

  request = require('request');

  path = require('path');

  http = require('http');

  path = require('path');

  async = require('async');

  serveStatic = require('serve-static');

  cartodb = require('cartodb');

  app = express();

  app.disable('etag');

  app.set('trust proxy', true);

  app.use(serveStatic('./', {
    'index': ['index.html', 'index.htm']
  }));

  app.use(serveStatic('./bower_components/jquery/dist'));

  app.use(serveStatic('./node_modules/web-audio-api/lib'));

  app.use(serveStatic('./lib'));

  app.use(serveStatic('./bower_components/mapbox.js'));

  app.use(serveStatic('./bower_components/semantic/dist'));

  app.use(serveStatic('./bower_components/cartodb.js'));

  app.use(serveStatic('./bower_components/cartodb.js/themes/css'));

  app.use(serveStatic('./bower_components/d3'));

  app.use(serveStatic('./bower_components/d3-queue'));

  app.use(serveStatic('./sounds'));

  user = "arminavn";

  api_key = "9150413ca8fb81229459d0a5c2947620e42d0940";

  sql = "SELECT * FROM table_4";

  lookup_sql = "SELECT * FROM soundsbrokendown_3min_3";

  labels_sql = "SELECT * FROM category_lookup";

  app.get('/labels', (function(_this) {
    return function(req, res) {
      var labels_res;
      labels_res = [];
      return request({
        method: 'GET',
        url: "https://" + user + ".cartodb.com/api/v2/sql?q=" + labels_sql + "&api_key=" + api_key,
        json: true
      }, function(error, label_response, labes_body) {
        var ea, i, len, ref;
        ref = labes_body.rows;
        for (i = 0, len = ref.length; i < len; i++) {
          ea = ref[i];
          labels_res.push({
            "abbr": ea.description,
            "name": ea.name
          });
        }
        return res.send(labels_res);
      });
    };
  })(this));

  app.get('/lookup', (function(_this) {
    return function(req, res) {
      var lookup_features;
      lookup_features = [];
      return request({
        method: 'GET',
        url: "https://" + user + ".cartodb.com/api/v2/sql?q=" + lookup_sql + "&api_key=" + api_key,
        json: true
      }, function(error, lookup_response, lookup_body) {
        var each, i, len, ref;
        if (!error && lookup_response.statusCode === 200) {
          ref = lookup_body.rows;
          for (i = 0, len = ref.length; i < len; i++) {
            each = ref[i];
            lookup_features.push({
              "location_number": +each.number,
              "time_in_seconds": each.time_in_seconds,
              "category": each.category
            });
          }
          return res.send(lookup_features);
        }
      });
    };
  })(this));

  app.get('/brokenDown/:station', (function(_this) {
    return function(req, res) {
      var lookup_features, param;
      param = req.params.station;
      lookup_sql = "SELECT * FROM soundsbrokendown_3min_3 WHERE SoundFile=" + param;
      lookup_features = [];
      return request({
        method: 'GET',
        url: "https://" + user + ".cartodb.com/api/v2/sql?q=" + lookup_sql + "&api_key=" + api_key,
        json: true
      }, function(error, lookup_response, lookup_body) {
        var each, i, len, ref;
        if (!error && lookup_response.statusCode === 200) {
          ref = lookup_body.rows;
          for (i = 0, len = ref.length; i < len; i++) {
            each = ref[i];
            lookup_features.push({
              "location_number": +each.soundfile,
              "seconds": each.seconds,
              "category": each.category
            });
          }
          return res.send(lookup_features);
        }
      });
    };
  })(this));

  app.get('/lookupby/:category_station', (function(_this) {
    return function(req, res) {
      var lookup_features, param;
      param = req.params.category_station.split('_');
      lookup_sql = "SELECT * FROM northend_soundcategories_time WHERE category IN ('" + param[0] + "') AND number=" + param[1];
      lookup_features = [];
      return request({
        method: 'GET',
        url: "https://" + user + ".cartodb.com/api/v2/sql?q=" + lookup_sql + "&api_key=" + api_key,
        json: true
      }, function(error, lookup_response, lookup_body) {
        var each, i, len, ref;
        console.log(lookup_body.rows);
        if (!error && lookup_response.statusCode === 200) {
          ref = lookup_body.rows;
          for (i = 0, len = ref.length; i < len; i++) {
            each = ref[i];
            lookup_features.push({
              "location_number": +each.number,
              "time_in_seconds": each.time_in_seconds,
              "category": each.category
            });
          }
          return res.send(lookup_features);
        }
      });
    };
  })(this));

  app.get('/categoryby/:station', (function(_this) {
    return function(req, res) {
      var lookup_features;
      lookup_features = [];
      return request({
        method: 'GET',
        url: "https://" + user + ".cartodb.com/api/v2/sql?q=" + lookup_sql + "&api_key=" + api_key,
        json: true
      }, function(error, lookup_response, lookup_body) {
        var each, i, len, ref;
        console.log(lookup_body.rows);
        if (!error && lookup_response.statusCode === 200) {
          ref = lookup_body.rows;
          for (i = 0, len = ref.length; i < len; i++) {
            each = ref[i];
            lookup_features.push({
              "location_number": +each.number,
              "time_in_seconds": each.time_in_seconds,
              "category": each.category
            });
          }
          return res.send(lookup_features);
        }
      });
    };
  })(this));

  app.get('/data', (function(_this) {
    return function(req, res) {
      var geores;
      geores = {
        "type": "FeatureCollection",
        "features": []
      };
      return request({
        method: 'GET',
        url: "https://" + user + ".cartodb.com/api/v2/sql?q=" + sql + "&api_key=" + api_key,
        json: true
      }, function(error, response, body) {
        var each, i, len, ref;
        if (!error && response.statusCode === 200) {
          ref = body.rows;
          for (i = 0, len = ref.length; i < len; i++) {
            each = ref[i];
            geores.features.push({
              "type": "Feature",
              "geometry": {
                "type": "Point",
                "coordinates": [each.longitude, each.latitude]
              },
              "properties": {
                "sound": each.sound,
                "file": each.file,
                "location_number": each.location_number
              }
            });
          }
          return res.send(geores);
        }
      });
    };
  })(this));

  app.get('/', function(req, res) {
    res.render('index', function(err, html) {
      res.send(html);
    });
  });


  /* Start the server */

  server = app.listen(process.env.PORT || '8080', '0.0.0.0', function() {
    console.log('App listening at http://%s:%s', server.address().address, server.address().port);
    console.log('Press Ctrl+C to quit.');
    console.log('checking if adjustments work');
  });

}).call(this);
