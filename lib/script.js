// Generated by CoffeeScript 1.10.0
(function() {
  (function() {
    var CenterControl, FFT_SIZE, HEIGHT, SMOOTHING, WIDTH, autoRotate, category_station_current, centerControl, centerControlDiv, color_map, customControl, drawMap, endSound, getAverageVolume, listener, loadSound, lookup_map, map_style, onClick, onError, onMouseover, oscale, playPause, playSound, rotate90, rscale, setupAudioNodes, sound_category_times, state_of_click, state_of_map, stopSound, updateMap;
    rscale = d3.scale.linear().domain([8, 30]).range([0, 10]);
    oscale = d3.scale.linear().domain([8, 25]).range([0.8, 0.2]);
    this.map = new google.maps.Map(d3.select('#map').node(), {
      center: new google.maps.LatLng(42.364981, -71.053695),
      zoom: 16,
      mapTypeId: google.maps.MapTypeId.SATELLITE,
      mapTypeControl: false,
      minZoom: 1,
      scaleControl: true,
      streetViewControl: true,
      rotateControl: true,
      rotateControlOptions: {
        position: google.maps.ControlPosition.TOP_RIGHT
      },
      overviewMapControl: true,
      heading: 90
    });
    WIDTH = 640;
    HEIGHT = 360;
    SMOOTHING = 0.8;
    FFT_SIZE = 2048;
    endSound = (function(_this) {
      return function(event) {
        return console.log("endSound");
      };
    })(this);
    listener = (function(_this) {
      return function(event) {
        return loadSound(event.feature.getProperty('file'));
      };
    })(this);
    this.dispatch = d3.dispatch("start", "end");
    this.dispatch.on("start", listener);
    this.dispatch.on("end", endSound);
    state_of_click = d3.map();
    state_of_map = d3.map();
    lookup_map = d3.map();
    category_station_current = d3.map();
    color_map = d3.map();
    category_station_current.set('category', 'A');
    sound_category_times = d3.map();
    color_map.set('C', "#A03F97");
    color_map.set('T', "#1B9E83");
    color_map.set('H', "#9BBF3A");
    color_map.set('B', "#E9B221");
    color_map.set('W', "#90D5E1");
    color_map.set('M', "#EE3125");
    color_map.set('A', "#ef532f");
    $.ajax({
      dataType: 'json',
      url: '/lookup',
      success: (function(_this) {
        return function(lookup_table) {
          var each_row, j, len, results;
          results = [];
          for (j = 0, len = lookup_table.length; j < len; j++) {
            each_row = lookup_table[j];
            results.push(lookup_map.set([each_row.location_number, each_row.category], each_row.time_in_seconds));
          }
          return results;
        };
      })(this)
    });
    drawMap = (function(_this) {
      return function() {
        return d3.json("/data", function(error, data) {
        if (error) throw error;

        _this.overlay = new google.maps.OverlayView();
        console.log("_this", _this)
        // Add the container when the overlay is added to the map.
        overlay.onAdd = function() {
          _this.layer = d3.select(this.getPanes().overlayLayer).append("div")
              .attr("class", "stations");

          // Draw each marker as a separate SVG element.
          // We could use a single SVG, but what size would it have?
          _this.overlay.draw = function() {
            projection = this.getProjection(),
                padding = 10;

            _this.marker = _this.layer.selectAll("svg")
                .data(d3.entries(data.features))
                .each(transform) // update existing markers
              .enter().append("svg")
                .each(transform)
                .attr("class", "marker");

            // Add a circle.
            _this.marker.append("circle")
                .attr("r", 0)
                .attr("cx", padding)
                .attr("cy", padding).attr("id", function(d){
                    return d.value.properties.file;
                })
                .style("fill", "red").style("stroke", "none")  ;

            // Add a label.
            _this.marker.on("mouseover", function(d){
              })
            function transform(d) {
              d = new google.maps.LatLng(d.value.geometry.coordinates[1], d.value.geometry.coordinates[0]);
              d = projection.fromLatLngToDivPixel(d);
              return d3.select(this)
                  .style("left", (d.x - padding) + "px")
                  .style("top", (d.y - padding) + "px");
            }
          };

          _this.overlay.update = function (aver) {
            console.log(aver)
            d3.select(this.getPanes().overlayLayer).selectAll("svg").each(function(each_el){
              
              if (each_el.value.properties.file == _this.url){
                return d3.select(this).select('circle').attr('r', 0).attr('r', rscale(aver)).style('fill-opacity', oscale(aver)).style('stroke', _this.color).style('fill', _this.color)
              }
              
            })

    

          };
        };

  // Bind our overlay to the mapâ€¦
  _this.overlay.setMap(_this.map);
});;
      };
    })(this);
    map.data.loadGeoJson('/data');
    map.data.setStyle(function(feature) {
      return {
        icon: {
          path: google.maps.SymbolPath.CIRCLE,
          scale: 20,
          strokeColor: '#ef532f',
          fillColor: '#ef532f',
          fillOpacity: 0.1,
          strokeWeight: 0
        }
      };
    });
    onClick = this.map.data.addListener("click", (function(_this) {
      return function(event) {
        var cat, id;
        cat = category_station_current.get('category');
        id = event.feature.getProperty('location_number');
        console.log(cat, event.feature.getProperty('location_number'));
        return $.ajax({
          dataType: 'json',
          url: "/lookupby/" + cat + "_" + id,
          success: function(_table) {
            var e, error, occurance, occurances;
            console.log("_table", _table[0]);
            try {
              occurance = _table[0];
              occurances = occurance.split('_');
            } catch (error) {
              e = error;
              console.log("no occurance");
            }
            if (occurance !== void 0) {
              _this.color = color_map.get("" + cat);
            } else {
              _this.color = '#ef532f';
            }
            state_of_click.set('clicked', true);
            console.log(sound_category_times);
            console.log(state_of_map.get('currentPlayingFile'));
            if (state_of_map.get('currentPlayingFile') !== event.feature.getProperty('file')) {
              _this.dispatch.end(event);
              _this.dispatch.start(event);
            } else {
              playPause();
            }
            state_of_map.set('currentPlayingFile', event.feature.getProperty('file'));
            onMouseover.remove();
            _this.map.data.revertStyle();
            return _this.map.data.overrideStyle(event.feature, {
              icon: {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 18,
                strokeColor: '#ef532f',
                fillColor: '#ef532f',
                fillOpacity: 0.1,
                strokeWeight: 0.9
              }
            });
          }
        });
      };
    })(this));
    onMouseover = this.map.data.addListener("mouseover", (function(_this) {
      return function(event) {
        _this.map.data.revertStyle();
        return _this.map.data.overrideStyle(event.feature, {
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            scale: 18.5,
            strokeColor: '#ef532f',
            fillColor: '#ef532f',
            fillOpacity: 0.5,
            strokeWeight: 0.4
          }
        });
      };
    })(this));
    this.context = new (window.AudioContext || window.webkitAudioContext);
    if (!this.context.createGain) {
      this.context.createGain = this.context.createGainNode;
    }
    if (!context.createDelay) {
      this.context.createDelay = this.context.createDelayNode;
    }
    if (!context.createScriptProcessor) {
      this.context.createScriptProcessor = this.context.createJavaScriptNode;
    }
    window.requestAnimFrame = (function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        window.setTimeout(callback, 1000 / 60);
      };
    })();
    setupAudioNodes = (function(_this) {
      return function() {
        _this.javascriptNode = _this.context.createScriptProcessor(2048, 1, 1);
        _this.javascriptNode.connect(_this.context.destination);
        _this.analyser = _this.context.createAnalyser();
        _this.analyser.smoothingTimeConstant = 0.3;
        _this.analyser.fftSize = 1024;
        _this.sourceNode = _this.context.createBufferSource();
        _this.sourceNode.connect(_this.analyser);
        _this.analyser.connect(_this.javascriptNode);
        return _this.sourceNode.connect(_this.context.destination);
      };
    })(this);
    setupAudioNodes();
    loadSound = (function(_this) {
      return function(url) {
        var request;
        _this.url = url;
        request = new XMLHttpRequest;
        request.open('GET', url, true);
        request.responseType = 'arraybuffer';
        request.onload = function() {
          _this.context.decodeAudioData(request.response, (function(buffer) {
            playSound(buffer);
          }), onError);
        };
        request.send();
      };
    })(this);
    playSound = (function(_this) {
      return function(buffer) {
        _this.sourceNode.buffer = buffer;
        return _this.sourceNode.start(0);
      };
    })(this);
    stopSound = (function(_this) {
      return function(url) {
        console.log("stopSound");
        _this.sourceNode.stop;
        setupAudioNodes();
        return loadSound(url);
      };
    })(this);
    onError = (function(_this) {
      return function(e) {
        return console.log(e);
      };
    })(this);
    this.javascriptNode.onaudioprocess = (function(_this) {
      return function() {
        var array, average;
        array = new Uint8Array(_this.analyser.frequencyBinCount);
        _this.analyser.getByteFrequencyData(array);
        average = getAverageVolume(array);
        _this.overlay.update(average);
      };
    })(this);
    getAverageVolume = function(array) {
      var average, i, length, values;
      values = 0;
      average = void 0;
      length = array.length;
      i = 0;
      while (i < length) {
        values += array[i];
        i++;
      }
      average = values / length;
      return average;
    };
    playPause = (function(_this) {
      return function() {
        if (_this.context.state === 'running') {
          return _this.context.suspend().then(function() {
            this.context.textContent = 'Resume context';
          });
        } else if (_this.context.state === 'suspended') {
          return _this.context.resume().then(function() {
            this.context.textContent = 'Suspend context';
          });
        }
      };
    })(this);
    drawMap();
    updateMap = (function(_this) {
      return function(average) {
        _this.map.data.revertStyle();
        return _this.map.data.overrideStyle(event.feature, {
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            scale: average,
            strokeColor: '#ef532f',
            fillColor: '#ef532f',
            fillOpacity: 0.5,
            strokeWeight: 1.4
          }
        });
      };
    })(this);
    CenterControl = function(controlDiv, map) {
      var controlText, controlUI;
      controlUI = document.createElement('div');
      controlUI.style.backgroundColor = '#fff';
      controlUI.style.border = '2px solid #fff';
      controlUI.style.borderRadius = '1px';
      controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
      controlUI.style.cursor = 'pointer';
      controlUI.style.marginBottom = '22px';
      controlUI.style.textAlign = 'left';
      controlUI.title = 'menu';
      controlDiv.appendChild(controlUI);
      controlText = document.createElement('div');
      controlText.style.color = 'rgb(25,25,25)';
      controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
      controlText.style.fontSize = '16px';
      controlText.style.lineHeight = '38px';
      controlText.style.paddingLeft = '5px';
      controlText.style.paddingRight = '5px';
      controlText.innerHTML = '|||';
      controlUI.appendChild(controlText);
      controlUI.addEventListener('click', function() {
        $('.ui.sidebar').sidebar('toggle');
      });
    };
    map_style = {};
    map_style.google_maps_customization_style = [
      {
        stylers: [
          {
            invert_lightness: true
          }, {
            weight: 1
          }, {
            saturation: -100
          }, {
            lightness: -40
          }
        ]
      }, {
        elementType: 'labels',
        stylers: [
          {
            visibility: 'simplified'
          }
        ]
      }
    ];
    rotate90 = function() {
      var heading;
      heading = map.getHeading() || 0;
      map.setHeading(heading + 90);
    };
    autoRotate = function() {
      if (map.getTilt() !== 0) {
        window.setInterval(rotate90, 3000);
      }
    };
    map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
    map.setOptions({
      styles: map_style.google_maps_customization_style
    });
    map.setTilt(45);
    $('.ui.sidebar').sidebar('toggle');
    customControl = L.Control.extend({
      options: {
        position: 'topleft'
      },
      onAdd: function(map) {
        var container;
        container = L.DomUtil.create('div', 'leaflet-control leaflet-control-custom');
        container.style.width = '30px';
        container.style.height = '30px';
        container.style.opacity = 1;
        container.style.color = 'white';
        L.DomUtil.get(container).innerHTML = "<i class='huge white sidebar icon'></i>";
        container.onclick = function() {
          $('.ui.sidebar').sidebar('toggle');
        };
        return container;
      }
    });
    centerControlDiv = document.createElement('div');
    centerControl = new CenterControl(centerControlDiv, map);
    centerControlDiv.index = 1;
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(centerControlDiv);
    $('.ui.sidebar').on('change', function(e) {
      var id;
      id = $(e.target).attr("name")[0].toUpperCase();
      console.log("id", id);
      return category_station_current.set('category', id);
    });
    $("#about").on('click', function() {
      return $('.ui.basic.modal').modal('show');
    });
    $('#sateliteBaseLayer').click((function(_this) {
      return function(event) {
        return map.setMapTypeId(google.maps.MapTypeId.SATELLITE);
      };
    })(this));
    $('#streetsBaseLayer').click((function(_this) {
      return function(event) {
        return map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
      };
    })(this));
  })();

}).call(this);
