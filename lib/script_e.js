// Generated by CoffeeScript 1.10.0
(function() {
  (function() {
    var FFT_SIZE, HEIGHT, SMOOTHING, WIDTH, getAverageVolume, loadSound, onError, playSound, setupAudioNodes, translate, updateMap;
    this.map = new google.maps.Map(d3.select('#map').node(), {
      center: new google.maps.LatLng(42.364981, -71.053695),
      zoom: 16,
      mapTypeId: google.maps.MapTypeId.SATELLITE,
      mapTypeControl: false,
      minZoom: 1,
      scaleControl: true,
      streetViewControl: true,
      rotateControl: true,
      rotateControlOptions: {
        position: google.maps.ControlPosition.TOP_RIGHT
      },
      overviewMapControl: true,
      heading: 90
    });
    WIDTH = 640;
    HEIGHT = 360;
    SMOOTHING = 0.8;
    FFT_SIZE = 2048;
    translate = function(d) {
      return 'translate(230, 100)';
    };
    this.vis = d3.select('.vis').append('svg').append('g').attr("transform", translate);
    this.circle = vis.append('circle').attr('r', 20).style('fill', 'red');
    this.context = new (window.AudioContext || window.webkitAudioContext);
    if (!this.context.createGain) {
      this.context.createGain = this.context.createGainNode;
    }
    if (!context.createDelay) {
      this.context.createDelay = this.context.createDelayNode;
    }
    if (!context.createScriptProcessor) {
      this.context.createScriptProcessor = this.context.createJavaScriptNode;
    }
    window.requestAnimFrame = (function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        window.setTimeout(callback, 1000 / 60);
      };
    })();
    setupAudioNodes = (function(_this) {
      return function() {
        _this.javascriptNode = _this.context.createScriptProcessor(2048, 1, 1);
        _this.javascriptNode.connect(_this.context.destination);
        _this.analyser = _this.context.createAnalyser();
        _this.analyser.smoothingTimeConstant = 0.3;
        _this.analyser.fftSize = 1024;
        _this.sourceNode = _this.context.createBufferSource();
        _this.sourceNode.connect(_this.analyser);
        _this.analyser.connect(_this.javascriptNode);
        return _this.sourceNode.connect(_this.context.destination);
      };
    })(this);
    setupAudioNodes();
    loadSound = (function(_this) {
      return function(url) {
        var request;
        request = new XMLHttpRequest;
        request.open('GET', url, true);
        request.responseType = 'arraybuffer';
        request.onload = function() {
          _this.context.decodeAudioData(request.response, (function(buffer) {
            playSound(buffer);
          }), onError);
        };
        request.send();
      };
    })(this);
    playSound = (function(_this) {
      return function(buffer) {
        _this.sourceNode.buffer = buffer;
        return _this.sourceNode.start(0);
      };
    })(this);
    onError = (function(_this) {
      return function(e) {
        return console.log(e);
      };
    })(this);
    this.javascriptNode.onaudioprocess = (function(_this) {
      return function() {
        var array, average;
        array = new Uint8Array(_this.analyser.frequencyBinCount);
        _this.analyser.getByteFrequencyData(array);
        average = getAverageVolume(array);
        _this.circle.attr('cx', average).attr('r', average * 1).attr('fill-opacity', average * 1);
      };
    })(this);
    getAverageVolume = function(array) {
      var average, i, length, values;
      values = 0;
      average = void 0;
      length = array.length;
      i = 0;
      while (i < length) {
        values += array[i];
        i++;
      }
      average = values / length;
      return average;
    };
    updateMap = (function(_this) {
      return function(average) {
        _this.map.data.revertStyle();
        return _this.map.data.overrideStyle(event.feature, {
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            scale: average,
            strokeColor: '#ef532f',
            fillColor: '#ef532f',
            fillOpacity: 0.5,
            strokeWeight: 1.4
          }
        });
      };
    })(this);
    d3.json("/data", function(error, data) {
        if (error) throw error;

        var overlay = new google.maps.OverlayView();

        // Add the container when the overlay is added to the map.
        overlay.onAdd = function() {
          var layer = d3.select(this.getPanes().overlayLayer).append("div")
              .attr("class", "stations");

          // Draw each marker as a separate SVG element.
          // We could use a single SVG, but what size would it have?
          overlay.draw = function() {
            var projection = this.getProjection(),
                padding = 10;

            var marker = layer.selectAll("svg")
                .data(d3.entries(data.features))
                .each(transform) // update existing markers
              .enter().append("svg")
                .each(transform)
                .attr("class", "marker");

            // Add a circle.
            marker.append("circle")
                .attr("r", 4.5)
                .attr("cx", padding)
                .attr("cy", padding);

            // Add a label.
            marker.append("text")
                .attr("x", padding + 7)
                .attr("y", padding)
                .attr("dy", ".31em")
                .text(function(d) { return d.key; });

            function transform(d) {
              d = new google.maps.LatLng(d.value.geometry.coordinates[1], d.value.geometry.coordinates[0]);
              d = projection.fromLatLngToDivPixel(d);
              return d3.select(this)
                  .style("left", (d.x - padding) + "px")
                  .style("top", (d.y - padding) + "px");
            }
          };
        };

  // Bind our overlay to the mapâ€¦
  overlay.setMap(map);
});
  })();

}).call(this);
